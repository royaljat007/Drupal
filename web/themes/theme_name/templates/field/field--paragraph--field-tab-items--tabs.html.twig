{#
/**
 * @file
 * Theme override for a field.
 *
 * To override output, copy the "field.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_foo field
 * on an article node type:
 * - field--node--field-foo--article.html.twig
 * - field--node--field-foo.html.twig
 * - field--node--article.html.twig
 * - field--field-foo.html.twig
 * - field--text-with-summary.html.twig
 * - field.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - multiple: TRUE if a field can contain multiple items.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 *
 *
 * @see template_preprocess_field()
 */
#}
{%
  set classes = [
    'field',
    'field--name-' ~ field_name|clean_class,
    'field--type-' ~ field_type|clean_class,
    'field--label-' ~ label_display,
    label_display == 'inline' ? 'clearfix',
  ]
%}
{%
  set title_classes = [
    'field__label',
    label_display == 'visually_hidden' ? 'visually-hidden',
  ]
%}

<div{{attributes.addClass(classes,'field__items')}}>
	<div class="nav-tabs">
		{% for item in items %}
    {% if loop.index == 1 %}
     {% set tab_class = 'active' %}
    {% else %}
    {% set tab_class = '' %}
    {% endif %}
				<button class="nav-tabs__btn {{ tab_class }}" data-tab="{{ loop.index }}">
					{{ item.content['#paragraph'].field_tab_title.value }}
        </button>
		{% endfor %}
		</div>
    {% for item in items %}
        {% if loop.index == 1 %}
     {% set tab_class = 'active' %}
    {% else %}
    {% set tab_class = '' %}
    {% endif %}
      <div class="tab-content {{ tab_class }}" id="tab_{{ loop.index }}">
        {{ item.content['#paragraph'].field_tab_content.value|raw }}
        {% set view_name =  item.content['#paragraph'].field_tab_content.value['0']['target_id']|raw %}
        {% set view_display_name =  item.content['#paragraph'].field_tab_content.value['0']['display_id']|raw %}
        {# {{ dump(view_name) }}
        {{ dump(view_display_name) }} #}
        {{ drupal_view( view_name , view_display_name ) }}
      </div>
    {% endfor %}
	</div>
